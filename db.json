{
  "HtmlProblems": [
    {
      "id": 1,
      "category": "HTML",
      "point": 10,
      "question": "`<h4>아래 HTML 요소 중 헤딩이 가장 큰 것은?</h4>`",
      "description": "",
      "choice": [
        "`<head></head>`",
        "`<h1></h1>`",
        "`<header></header>`",
        "`<main></main>`"
      ],
      "answer": "`<h1></h1>`"
    },

    {
      "id":2,
      "category":"HTML",
      "point":25,
      "question":"HTML의 <meta>요소의 사용 중 틀린 것은?",
      "description":"1.<meta charset = \"UTF-8\">\n2. <meta name=\"viewport\" value=\"420\">\n3. <meta name=\"author\" content=\"Keanu Reeves\">\n4. <meta http-equiv=\"refresh\" content=\"60\">\n",
      "choice": [
        "1",
        "2",
        "3",
        "4"
      ],
      "answer": "2"

    },

    {
      "id": 3,
      "category":"HTML",
      "point":100,
      "question":"Iframe에 관해 틀린 것을 선택하시오.",
      "description":"1. Iframe은 브라우저에 embed된 중첩 브라우징 컨텍스트를 나타낸다.\n2. 중첩된 브라우징 컨텍스트들은 하나의 세션 기록과 문서를 나타낸다.\n3. 브라우징 컨텍스트들을 embed시키는 브라우징 컨텍스트를 부모 브라우징 컨텍스트라 부른다.\n4. iframe은 무한대로 사용할 수 있지만 , 메모리 공간을 많이 사용하므로 많이 사용하지 않는것이 좋다.\n",
      "choice": [
        "1",
        "2",
        "3",
        "4"
      ]
    },

    {
      "id": 4,
      "category":"HTML",
      "point": 10,
      "question": "Form 태그의 설명 중 옳지 않은 것을 고르시오.",
      "description": "1. form 태그는 중첩해서 사용할 수 없다.\n2. form 태그 내에 action은 데이터를 전송할 위치를 나타낸다.\n3. fieldset 요소로 비슷한 기능들을 묶고, 하위에 legend 요소로 fieldseet의 기능을 설명한다.\n4. label태그의 for 어트리뷰트는 class를 가리킨다.\n",
      "choice": [
        "1",
        "2",
        "3",
        "4"
      ]
    },

    {
      "id": 5

    }
  ],

    "CssProblems": [
      {
        "id": 1,
        "category": "CSS",
        "point": 10,
        "question": "`다음 중 flex container의 속성인 것은?`",
        "description": "",
        "choice": [
          "flex",
          "flex-flow",
          "order",
          "align-self"
        ],
        "answer": "flex-flow"
      },

      {
        "id": 2,
        "category": "CSS",
        "point": 10,
        "question":"다음 중 normal flow를 바꾸지 않는 속성은?",
        "description": "",
        "choice": [
          "position: absolute",
          "position: fixed",
          "display: flex",
          "display: float"
        ],
        "answer": "display: flex"
      },

      {
        "id": 3,
        "category": "CSS",
        "point": 25,
        "question":"다음중 CSS 선택자가 아닌 것은?",
        "description":"",
        "choice": [
          ">",
          "||",
          "~",
          "?"
        ],
        "answer":"?"
      },

      {
        "id": 4,
        "category": "CSS",
        "point": 50,
        "question":"다음 중 @media 사용 문법에 맞지 않는 것은?",
        "description":"\n1. @media (min-width: 900px) and (max-width: 1500px)\n2. @media (height > 600px)\n3. @media (hover: hover)\n4. @media (and(hover))",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ]
      },

      {
        "id": 5,
        "category": "CSS",
        "point": 100,
        "question":"CSS의 상속에 대해서 틀린 것은?",
        "description":"\n1. 상속은 프로퍼티나 요소에 값을 주지 않았을때 이루어진다.\n2. 자식 요소의 상속 프로퍼티에 값이 없다면, 부모 요소의 computed value를 갖게된다.\n3. 자식 요소의 비상속 프로퍼티에 값이 없다면, 비상속 프로퍼티의 기존 값을 가진다.\n4. inherit 키워드를 통해 상속을 직접 시킬 수 있다. 다만, 상속 프로퍼티만 상속시킬 수 있다.",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer":"4"
      },

      {
        "id":5,
        "category":"CSS",
        "point": 10,
        "question":"배경 색의 우선순위를 갖는 것을 선택하시오.",
        "description":"<code>body {\n  background: blue;\n  background: green !important;\n  background: cyan !important;\n  background: black !important;\n}</code>",
        "choice": [
          "blue",
          "green",
          "cyan",
          "black"
        ],
        "answer": "black"
      },

      {
        "id":6,
        "category":"CSS",
        "point":50,
        "question":"margin의 결합(collapse)에 대해 틀린 것을 고르시오.",
        "description":"1. 두 블록들의 top과 bottom margin은 둘중 더 큰 값으로 결합한다.\n2. 형제 관계에 있는 블록들의 margin은 결합된다.\n3. 부모와 자식 요소간에 블록 서식 문맥이 없다면 마진들이 결합된다.\n4. 빈 블록(border, padding, height, content등이 없는)은 좌/우 margin들이 상쇄된다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer":"4"
      },

      {
        "id":7,
        "category":"CSS",
        "point":100,
        "question":"computed value에 대해 옳은 것을 고르시오.",
        "description": "1. CSS 프로퍼티의 computed value는 부모가 자식에 의해 갖게 된다.\n2. inherit, initial, unset, revert로 계산된다.\n3. computed value를 계산하기 위해 절대 값을 일반 값으로 바꾼다.\n4. computed value는 %단위의 값을 가질 수 없다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer":"2"
      },

      {
        "id":8,
        "category":"CSS",
        "point":25,
        "question":"CSS 축약표현 설명 중 틀린 것을 고르시오.",
        "description":"1. background 프로퍼티로 background-color/image/repeat/position를 축약할 수 있다.\n2. font 프로퍼티로 font-style/weight/size/height/family/ 를 축약할 수 있다.\n3. border 프로퍼티로 border-width/style/color/shadow를 축약할 수 있다.\n4. CSS에는 전역 축약 프로퍼티 all이 있으며, 문서의 모든 프로퍼티에 적용을시킨다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer":"3"
      },

      {
        "id":9,
        "category":"CSS",
        "point": 25,
        "question":"position 프로퍼티에 대해 틀린 것은?",
        "description":"1. position 을 사용한 요소는 position의 값이 relative, absolute, fixed, sticky 또는 static이다.\n2. position: absolute인 요소는 요소가 소속된 블록 을 기준으로 top,right,left,bottom 로 offset을 준다.\n3. position: relative의 top,bottom,left,right은 원본 위치에 따른 offset이다.\n4. position: sticky는 소속된 블록이 특정 위치를 지나기 전까지 relative와같이 취급된다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer":"1"
      },

      {
        "id": 10,
        "category":"CSS",
        "point":50,
        "question":"다음 중 z-index에 관해 옳은 것을 고르시오.",
        "description": "1. z-index는 요소들이 쌓이는(stacking) 순서를 정하는 정수이며, 모든 요소에 적용시킬 수 있다.\n2. z-index를 사용하지 않으면, 요소들은 default 랜더링 layer 0에 렌더링 된다.\n3. z-index값이 같은 요소들은 같은 layer에 나타난다.\n4. z-index의 값이 클수록 윗쪽 레이어에 나타나 z-index값이 작은 요소들의 위에 나타난다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ],
        "answer": "1"
      },

      {
        "id": 11,
        "category":"CSS",
        "point": 100,
        "question":"다음 중 블록 서식 문맥(Block Format Context)에 대해 틀린 것을 고르시오.",
        "description":"1. 블록 서식 문맥은 웹페이지의 블록 레벨 요소를 렌더링하는데 사용되는 CSS의 모델 중 하나이다.\n2. 블록 서식 분맥은 블록 서식 문맥을 생성하는 요소속 모든 것을 포함한다.\n3. 블록 서식 문맥은 문서의 루트 요소인 <html>만이 만들 수 있다.\n4. 블록 서식 문맥은 블록박스들의 레이아웃이 결정되고, float된 요소들이 다른 요소와 상호작용 하는 공간이다.\n",
        "choice": [
          "1",
          "2",
          "3",
          "4"
        ]
      }
  ],

  "JavascriptProblems": [

    {
      "id": 1,
      "category": "Javascript",
      "point": 25,
      "question": "다음 중 실행 컨텍스트에 대해서 옳은 것은?",
      "description": "",
      "choice": [
        "자바스크립트는 여러 개의 실행 컨텍스트를 갖는다.",
        "자바스크립트는 동기식 처리 모델을 갖는다.",
        "렉시컬 환경은 식별자를 관리한다.",
        "프로토타입 체인은 렉시컬 환경의 단방향 구조 연결이다."
      ],
      "answer": "렉시컬 환경은 식별자를 관리한다."
    },

    {
      "id": 2,
      "category": "Javascript",
      "point": 10,
      "question": "자바스크립트가 식별자를 검색할 때 검색을 시작하는 위치는?",
      "description":"",
      "choice": [
        "Window객체",
        "OuterLexicalEnvironmentReference",
        "현재 실행 중인 실행 컨텍스트의 렉시컬 환경",
        "일시적 사각지대(TDZ)"
      ],
      "answer": "현재 실행 중인 실행 컨텍스트의 렉시컬 환경"
    },

    {
      "id": 3,
      "category": "Javascript",
      "point": 50,
      "question": "아래 코드이 실행 결과는?<h4>",
      "description": "const Animal = (function () {\n  let _animal = '';\n\n  function Animal(name) {\n    _animal = name;\n  }\n\n  Animal.prototype.bark = function () {\n    console.log(${_animal} says WOOF!);\n  }\n  return Animal;\n}());\n\nconst dog = new Animal(doggy);\ndog.bark();",
      "choice": [
        "doggy says WOOF!",
        "SyntaxError",
        "undefined",
        "ReferenceError"
      ],
      "answer": "ReferenceError"
    },

    {
      "id":4,
      "category":"Javascript",
      "point": 50,
      "question":"생성자 함수에 대한 정보중 틀린것을 고르시오.",
      "description":"",
      "choice": [
        "동일한 프로퍼티 구조를 갖는 여러개의 객체를 생성하기 위해 사용한다.",
        "모든 생성자 함수는 내부 메소드 [[Call]]과 [[Construct]]를 가지고 있다.",
        "생성자 함수는 인스턴스를 필수적으로 생성해야한다.",
        "생성자 함수로 생성된 인스턴스는 필수적으로 초기화해야한다."
      ],
      "answer": "생성자 함수로 생성된 인스턴스는 필수적으로 초기화해야한다."
    },

    {
      "id":5,
      "category":"Javascript",
      "point":50,
      "question":"자바스크립트는 함수를 생성할 때, FunctionCreate를 사용한다. FunctionCreate에 대해 틀린 것을 고르시오.",
      "description":"",
      "choice": [
        "FunctionCreate는 추상 연산으로, ECMAScript 사양에서 내부 동작의 구현 알고리즘을 표현한 것이다.",
        "FunctionCreate는 함수 정의가 평가될때 호출된다.",
        "FunctionCreate는 첫 매개변수 kind에 문자열로 Normal, Arrow, Method, Anonymous가 전달된다.",
        "ES6의 메소드 축약 표현만을 kind = 'Method'로 인정한다."
      ],
      "answer":" FunctionCreate는 첫 매개변수 kind에 문자열로 Normal, Arrow, Method, Anonymous가 전달된다."
    },

    {
      "id":6,
      "category":"Javascript",
      "point": 100,
      "question": "고차 함수와 콜백에 대해 옳지 않은 것을 고르시오.",
      "description":"",
      "choice": [
        "고차 함수는 인자로 받은 함수를 필요한 시점에 호출하거나 클로저를 생성해 반환한다.",
        "함수를 인수로 전달하여 외부함수의 기능이 끝난이후에 호출이 되도록 하여 동기성을 가능하게 한다.",
        "콜백 함수는 다른 함수의 실행이 끝나기 이전에 함수가 호출되지 않도록 사용 하는 방법중 하나이다.",
        "콜백 함수는 다른 함수의 인수로 들어갈 수도 있고, 함수 호출문의 인수로 들어갈 수도 있다."
      ],
      "answer":"함수를 인수로 전달하여 외부함수의 기능이 끝난이후에 호출이 되도록 하여 동기성을 가능하게 한다."
    },

    {
      "id":7,
      "category":"Javascript",
      "point":100,
      "question":"클로저에 대한 설명중 틀린것을 고르시오.",
      "description":"",
      "choice": [
        "모든 함수는 [[Environment]] 내부 슬롯에 자신이 정의된 렉시컬 환경의 참조를 저장한다.",
        "중첩 함수가 외부의 렉시컬 환경을 기억해 외부 함수의 실행이 종료되어도 외부 함수를 참조 할 수 있다.",
        "클로저는 상태를 안전하게 유지하고, 정보를 은닉해준다.",
        "내부 함수는 클로저를 통해 참조하고 있는 정보 이외에 외부 함수의 모든 정보를 저장하고있다."
      ],
      "answer":"내부 함수는 클로저를 통해 참조하고 있는 정보 이외에 외부 함수의 모든 정보를 저장하고있다."
    },

    {
      "id":8,
      "category":"Javascript",
      "point":10,
      "question":"배열의 메소드들에 대한 설명중 틀린 것은?",
      "description":"",
      "choice": [
        "sort 메소드를 원본 배열을 변경하며 오름차순으로 요소들을 정렬한다.",
        "forEach메소드는 배열의 각 요소에 대해 인수로 받은 콜백 함수를 실행한다.",
        "map메소드는 원본 배열을 변경하여 각 요소를 새롭게 맵핑한다.",
        "filter메소드는 배열의 요소를 순회하며 콜백 함수의 결과가 true인 요소만 추출한다."
      ],
      "answer": "map메소드는 원본 배열을 변경하여 각 요소를 새롭게 맵핑한다."
    },

    {
      "id":9,
      "category":"Javascript",
      "point":25,
      "question":"아래 코드의 실행 결과는 무엇인가요?",
      "description":"<code>function makeCounter() {\n  let counter = 0;\n\n\nreturn function (predicate) {\n  counter = predicate(counter);\n  return counter\n  }\n};\n\nfunction increase(n) {\n  return ++n;\n}\n\nfunction decrease(n) {\n  return --n;\n}\n\nlet counter = makeCounter();\n\nconsole.log(counter(increase));\nconsole.log(counter(increase));\nconsole.log(counter(decrease));\nconsole.log(counter(decrease));</code>",
      "choice": [
        "1 2 1 0",
        "1 2 -1 -2",
        "1 1 -1 -1",
        "undefined"
      ],
      "answer":"1 2 1 0"
    },

    {
      "id":10,
      "category":"Javascript",
      "point": 25,
      "question":"아래 코드의 결과는?",
      "description":"let bottles = [\n  { type: \"plastic\", content: \"water\", empty: false },\n  { type: \"glass\", content: \"whiskey\", empty: true },\n  { type: \"aluminum\", content: \"coke\", empty: false }\n];\n\nfunction addDrink(drink) {\n  bottles = [drink, ...bottles];\n}\n\naddDrink({ type: \"tin\", content: \"cement\", empty: false });\nconsole.log(bottles[0]);",
      "choice": [
        "{ type: 'aluminum', content: 'coke', empty: false }",
        "SyntaxError",
        "undefined",
        "referenceError"
      ],
      "answer": "{ type: 'aluminum', content: 'coke', empty: false }"
    },

    {
      "id":11,
      "category":"Javascript",
      "point": 10,
      "question": "아래 코드의 결과는?",
      "description":"const x = 5;\n\nfunction outer () {\n  const y = 7;\n\n  function add () {\n    const z = 3;\n    console.log(x + y + z);\n  }\n  add();\n}\n\nouter();",
      "choice": [
        "undefined",
        "SyntaxError",
        "15",
        "referenceError"
      ]
    }
  ]
}